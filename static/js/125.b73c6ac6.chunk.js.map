{"version":3,"file":"static/js/125.b73c6ac6.chunk.js","mappings":"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","sources":["store/comments/selectors.js","components/Posts/PostDetails.jsx","components/Posts/Posts.jsx"],"sourcesContent":["export const commentsSelector = state => state.comments\n","import { Fragment, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { authSelector } from 'store/auth/selectors'\nimport { commentsSelector } from 'store/comments/selectors'\nimport {\n    createCommentThunk,\n    getCommentsByPostThunk,\n} from 'store/comments/thunks'\n\nconst PostDetails = ({ post: { _id, title, body } }) => {\n    const { profile } = useSelector(authSelector)\n    const { comments } = useSelector(commentsSelector)\n    const [commentsData, setCommentsData] = useState(null)\n\n    useEffect(() => {\n        comments?.[0]?.postId === _id\n            ? setCommentsData(comments)\n            : setCommentsData(null)\n    }, [_id, comments])\n\n    const dispatch = useDispatch()\n    const handleSubmit = e => {\n        e.preventDefault()\n        dispatch(\n            createCommentThunk({\n                id: _id,\n                body: { body: e.target[0].value, userId: profile._id },\n            })\n        )\n            .unwrap()\n            .then(() => dispatch(getCommentsByPostThunk(_id)))\n        e.target.reset()\n    }\n    const handleShow = async () => {\n        dispatch(getCommentsByPostThunk(_id))\n    }\n\n    return (\n        <>\n            <h3>{title}</h3>\n            <p>{body}</p>\n\n            {!commentsData && (\n                <button onClick={handleShow}>Show comments</button>\n            )}\n            {commentsData &&\n                commentsData.map(com => (\n                    <Fragment key={com._id}>\n                        <h3>{com.creator.firstName}</h3>\n                        <p>{com.body}</p>\n                    </Fragment>\n                ))}\n            <form onSubmit={handleSubmit}>\n                <textarea rows=\"2\"></textarea>\n                <button>Add comment</button>\n            </form>\n        </>\n    )\n}\n\nexport default PostDetails\n","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { toast } from 'react-hot-toast'\nimport { getPostsByUserId } from 'api/users'\nimport PostDetails from './PostDetails'\n\nconst Posts = () => {\n    const [posts, setPosts] = useState(null)\n\n    const { id } = useParams()\n\n    useEffect(() => {\n        getPosts(id)\n    }, [id])\n\n    const getPosts = async userId => {\n        try {\n            const { posts } = await getPostsByUserId(userId)\n            setPosts(posts)\n        } catch (error) {\n            toast.error(error.message)\n        }\n    }\n\n    return (\n        posts && posts.map(post => <PostDetails key={post._id} post={post} />)\n    )\n}\n\nexport default Posts\n"],"names":["commentsSelector","state","comments","_ref","_ref$post","post","_id","title","body","profile","useSelector","authSelector","_useState","useState","_useState2","_slicedToArray","commentsData","setCommentsData","useEffect","_comments$","postId","dispatch","useDispatch","handleShow","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getCommentsByPostThunk","stop","apply","arguments","_jsxs","_Fragment","children","_jsx","onClick","map","com","Fragment","creator","firstName","onSubmit","e","preventDefault","createCommentThunk","id","target","value","userId","unwrap","then","reset","rows","posts","setPosts","useParams","getPosts","_yield$getPostsByUser","_posts","getPostsByUserId","sent","t0","toast","message","_x","PostDetails"],"sourceRoot":""}