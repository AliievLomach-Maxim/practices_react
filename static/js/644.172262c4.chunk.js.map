{"version":3,"file":"static/js/644.172262c4.chunk.js","mappings":"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","sources":["components/User/User.jsx","components/UserList/UsersList.jsx","components/Form/SearchForm.jsx","pages/Users/UsersPage.jsx"],"sourcesContent":["import {\n    CardActions,\n    CardMedia,\n    Button,\n    Typography,\n    Card,\n    CardContent,\n} from '@mui/material'\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos'\nimport { Outlet, useLocation, useNavigate } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nconst User = ({ user: { _id, firstName, image, email, phone }, isDetails }) => {\n    const navigate = useNavigate()\n    const location = useLocation()\n\n    const handleClick = route => {\n        navigate(route, { state: location.state })\n    }\n\n    const pathname = location.pathname === '/' ? '/users' : location.pathname\n\n    return (\n        <>\n            {!isDetails && (\n                <Button\n                    variant=\"text\"\n                    sx={{ borderRadius: 30, p: 1 }}\n                    onClick={() => handleClick(location.state)}\n                >\n                    <ArrowBackIosIcon fontSize=\"large\" />\n                </Button>\n            )}\n            <Card sx={{ maxWidth: isDetails ? 400 : 600, m: '0 auto' }}>\n                <CardMedia\n                    sx={{ height: 440 }}\n                    image={image}\n                    title={firstName}\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {firstName}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                        Phone: {phone}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                        Email: {email}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    {isDetails ? (\n                        <Button\n                            size=\"medium\"\n                            onClick={() =>\n                                navigate(`${pathname}/${_id}`, {\n                                    state: location,\n                                })\n                            }\n                        >\n                            Show Details\n                        </Button>\n                    ) : (\n                        <Button\n                            size=\"medium\"\n                            onClick={() => handleClick('posts')}\n                        >\n                            Posts\n                        </Button>\n                    )}\n                </CardActions>\n                <Outlet />\n            </Card>\n        </>\n    )\n}\n\nUser.propTypes = {\n    user: PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        firstName: PropTypes.string.isRequired,\n        image: PropTypes.string,\n        email: PropTypes.string.isRequired,\n        phone: PropTypes.string,\n    }),\n    isDetails: PropTypes.bool,\n}\n\nexport default User\n","import PropTypes from 'prop-types'\nimport User from '../User/User'\nimport { Grid } from '@mui/material'\nimport { authSelector } from 'store/auth/selectors'\nimport { useSelector } from 'react-redux'\n\nconst UsersList = ({ users, isDetails }) => {\n    const { token } = useSelector(authSelector)\n\n    return (\n        <Grid container spacing={4} justifyContent=\"center\">\n            {users.map(user => (\n                <Grid item xs={token ? 6 : 3} key={user._id}>\n                    <User user={user} isDetails={isDetails} />\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n\nUsersList.propTypes = {\n    users: PropTypes.arrayOf(\n        PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            firstName: PropTypes.string.isRequired,\n            image: PropTypes.string,\n            email: PropTypes.string.isRequired,\n            phone: PropTypes.string,\n        })\n    ),\n    isDetails: PropTypes.bool,\n}\n\nexport default UsersList\n","import PropTypes from 'prop-types'\nimport SearchIcon from '@mui/icons-material/Search'\nimport {\n    FormControl,\n    IconButton,\n    InputAdornment,\n    Stack,\n    TextField,\n} from '@mui/material'\n\nconst SearchForm = ({ handleSearchQuery, setSearchParams, searchQuery }) => {\n    const handleChange = ({ target: { value } }) =>\n        setSearchParams({ search: value })\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        handleSearchQuery()\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Stack>\n                <FormControl\n                    sx={{ m: '0 auto', width: 400 }}\n                    variant=\"outlined\"\n                >\n                    <TextField\n                        id=\"outlined-adornment-weight\"\n                        label=\"Search\"\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        type=\"submit\"\n                                        sx={{ p: '10px' }}\n                                        aria-label=\"search\"\n                                    >\n                                        <SearchIcon />\n                                    </IconButton>\n                                </InputAdornment>\n                            ),\n                        }}\n                        value={searchQuery}\n                        onChange={handleChange}\n                    />\n                </FormControl>\n            </Stack>\n        </form>\n    )\n}\n\nSearchForm.propTypes = {\n    handleSearchQuery: PropTypes.func.isRequired,\n    setSearchParams: PropTypes.func.isRequired,\n    searchQuery: PropTypes.string.isRequired,\n}\n\nexport default SearchForm\n","import { useEffect, useMemo, useState } from 'react'\nimport { toast } from 'react-hot-toast'\nimport { useSearchParams } from 'react-router-dom'\nimport { searchUser } from 'api/users'\nimport SearchForm from 'components/Form/SearchForm'\nimport UsersList from 'components/UserList/UsersList'\nimport { Button, Stack, Typography } from '@mui/material'\n\nconst LIMIT = 10\n\nconst UsersPage = () => {\n    const [users, setUsers] = useState(null)\n    const [page, setPage] = useState(1)\n    const [search, setSearch] = useState('')\n    const [searchParams, setSearchParams] = useSearchParams()\n\n    const searchQuery = useMemo(\n        () => searchParams.get('search') ?? '',\n        [searchParams]\n    )\n\n    const handleSearchQuery = () => {\n        setPage(1)\n        setSearch(searchQuery)\n    }\n\n    useEffect(() => {\n        !searchQuery && setSearchParams({})\n    }, [searchQuery, setSearchParams])\n\n    const getSearchResult = async (searchQuery, pageNumber) => {\n        const toastId = toast.loading('Loading...')\n        try {\n            const { users, total } = await searchUser(\n                searchQuery,\n                pageNumber,\n                LIMIT\n            )\n            if (total) {\n                setUsers(prev => (prev ? [...prev, ...users] : [...users]))\n                toast.success(`Finned ${total} users`, {\n                    id: toastId,\n                })\n            } else {\n                toast.error('Not found', {\n                    id: toastId,\n                })\n            }\n        } catch (error) {\n            toast.error(error.message)\n        }\n    }\n\n    useEffect(() => {\n        page === 1 && setUsers(null)\n        search && getSearchResult(search, page)\n    }, [search, page])\n\n    const loadMore = () => setPage(prev => prev + 1)\n\n    return (\n        <Stack>\n            <Stack mb={3}>\n                <SearchForm\n                    handleSearchQuery={handleSearchQuery}\n                    searchQuery={searchQuery}\n                    setSearchParams={setSearchParams}\n                />\n            </Stack>\n            {users && (\n                <>\n                    <UsersList users={users} isDetails />\n                    {users.length > LIMIT && (\n                        <Button\n                            variant=\"outlined\"\n                            fullWidth\n                            sx={{ p: 2, mt: 4 }}\n                            onClick={loadMore}\n                        >\n                            <Typography variant=\"h5\">More...</Typography>\n                        </Button>\n                    )}\n                </>\n            )}\n        </Stack>\n    )\n}\n\nexport default UsersPage\n"],"names":["_ref","_ref$user","user","_id","firstName","image","email","phone","isDetails","navigate","useNavigate","location","useLocation","handleClick","route","state","pathname","_jsxs","_Fragment","children","_jsx","Button","variant","sx","borderRadius","p","onClick","ArrowBackIosIcon","fontSize","Card","maxWidth","m","CardMedia","height","title","CardContent","Typography","gutterBottom","component","color","CardActions","size","concat","Outlet","users","token","useSelector","authSelector","Grid","container","spacing","justifyContent","map","item","xs","User","handleSearchQuery","setSearchParams","searchQuery","onSubmit","e","preventDefault","Stack","FormControl","width","TextField","id","label","InputProps","endAdornment","InputAdornment","position","IconButton","type","SearchIcon","value","onChange","_ref2","target","search","_useState","useState","_useState2","_slicedToArray","setUsers","_useState3","_useState4","page","setPage","_useState5","_useState6","setSearch","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","useMemo","_searchParams$get","get","useEffect","getSearchResult","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pageNumber","toastId","_yield$searchUser","_users","total","wrap","_context","prev","next","toast","searchUser","sent","_toConsumableArray","t0","message","stop","_x","_x2","apply","arguments","mb","SearchForm","UsersList","length","fullWidth","mt"],"sourceRoot":""}