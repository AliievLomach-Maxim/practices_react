{"version":3,"file":"static/js/890.18b5b780.chunk.js","mappings":"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","sources":["components/Button/Button.styled.js","components/Button/Button.jsx","components/Form/SearchForm.styled.js","webpack://practices_react/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","components/User/User.styled.js","components/User/User.jsx","components/UserList/UsersList.jsx","store/users/selectors.js","components/Form/FilterForm.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const StyledButton = styled.button`\n    cursor: pointer;\n    min-width: 120px;\n    padding: 10px;\n    background-color: burlywood;\n    border-radius: 8px;\n    display: block;\n    margin-top: 10px;\n    margin: ${({ center }) => (center ? '0 auto 24px' : '')};\n`\n","import { StyledButton } from './Button.styled'\n\nconst Button = ({ handleClick, text, center }) => {\n    return (\n        <StyledButton center type=\"button\" onClick={handleClick}>\n            {text}\n        </StyledButton>\n    )\n}\n\nexport default Button\n","import styled from 'styled-components'\n\nexport const Form = styled.form`\n    display: flex;\n    justify-content: center;\n    padding: 12px;\n    input {\n        padding: 12px;\n        width: 300px;\n        font-weight: bold;\n        font-size: 18px;\n        border-radius: 8px;\n        margin-right: 12px;\n    }\n    button {\n        cursor: pointer;\n        width: 120px;\n        padding: 10px;\n        background-color: burlywood;\n        border-radius: 8px;\n        font-weight: 400;\n        font-size: 18px;\n    }\n`\n","// extracted by mini-css-extract-plugin\nexport default {\"baseSection\":\"Section_baseSection__lX1iS\",\"superSection\":\"Section_superSection__qKemp Section_baseSection__lX1iS\"};","import css from './Section.module.css'\n\nconst Section = ({ title, children }) => {\n    return (\n        <section className={title ? css.superSection : css.baseSection}>\n            {title && <h1>{title}</h1>}\n            {children}\n        </section>\n    )\n}\n\nexport default Section\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nexport const Title = styled.h2`\n    color: red;\n    text-shadow: 1px 1px 2px teal;\n    &:hover {\n        text-shadow: 1px 1px 0.5em teal;\n        cursor: pointer;\n    }\n`\n\nexport const Text = styled.p`\n    color: teal;\n    text-shadow: 0 0 2px white;\n`\n\nexport const NativeText = styled.span`\n    color: ${({ isEndedBiz }) => (isEndedBiz ? 'red' : 'yellow')};\n    ${Text}:hover & {\n        text-shadow: 1px 1px 0.5em teal;\n    }\n`\n\nexport const StyledButton = styled.button`\n    cursor: pointer;\n    min-width: 120px;\n    padding: 10px;\n    background-color: burlywood;\n    border-radius: 8px;\n    display: block;\n    margin-top: 10px;\n`\n\nexport const StyledLink = styled(Link)`\n    cursor: pointer;\n    width: 120px;\n    padding: 10px;\n    background-color: burlywood;\n    text-align: center;\n    border-radius: 8px;\n    display: block;\n    margin-top: 10px;\n    text-decoration: none;\n    color: black;\n    box-shadow: 0 0 12px black;\n    &:hover {\n        box-shadow: 0 0 18px black;\n    }\n`\n","import { Outlet, useLocation, useNavigate } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport Section from '../Section/Section'\nimport {\n    NativeText,\n    Text,\n    Title,\n    StyledLink,\n    StyledButton,\n} from './User.styled'\n\nconst User = ({ user: { _id, firstName, image, email, phone }, isDetails }) => {\n    const navigate = useNavigate()\n    const location = useLocation()\n\n    const handleClick = route => {\n        navigate(route, { state: location.state })\n    }\n\n    const pathname = location.pathname === '/' ? '/users' : location.pathname\n\n    return (\n        <>\n            {!isDetails && (\n                <StyledButton onClick={() => handleClick(location.state)}>\n                    {'<'}\n                </StyledButton>\n            )}\n            <Section>\n                <li>\n                    <img src={image} alt={'Avatar'} width=\"200px\" />\n                    <Title>{firstName}</Title>\n                    <Text>\n                        Phone: <NativeText>{phone}</NativeText>\n                    </Text>\n                    <Text>\n                        Email:\n                        <NativeText>{email}</NativeText>\n                    </Text>\n                    {isDetails ? (\n                        <StyledLink to={`${pathname}/${_id}`} state={location}>\n                            Show Details\n                        </StyledLink>\n                    ) : (\n                        <StyledButton onClick={() => handleClick('posts')}>\n                            Posts\n                        </StyledButton>\n                    )}\n                </li>\n                <Outlet />\n            </Section>\n        </>\n    )\n}\n\nUser.propTypes = {\n    user: PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        firstName: PropTypes.string.isRequired,\n        image: PropTypes.string,\n        email: PropTypes.string.isRequired,\n        phone: PropTypes.string,\n    }),\n    isDetails: PropTypes.bool,\n}\n\nexport default User\n","import PropTypes from 'prop-types'\nimport User from '../User/User'\n\nconst UsersList = ({ users, isDetails }) => {\n    return (\n        <ul>\n            {users.map(user => (\n                <User key={user._id} user={user} isDetails={isDetails} />\n            ))}\n        </ul>\n    )\n}\n\nUsersList.propTypes = {\n    users: PropTypes.arrayOf(\n        PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            firstName: PropTypes.string.isRequired,\n            image: PropTypes.string,\n            email: PropTypes.string.isRequired,\n            phone: PropTypes.string,\n        })\n    ),\n    isDetails: PropTypes.bool,\n}\n\nexport default UsersList\n","import { createSelector } from '@reduxjs/toolkit'\n\nconst usersItemsSelector = state => state.users.users\nexport const filterSelector = state => state.users.filter\n\nexport const usersSelector = createSelector(\n    [usersItemsSelector, filterSelector],\n    (users, filter) => {\n        if (!users.items) {\n            return users\n        }\n\n        const lowercaseFilter = filter.toLowerCase()\n        const filteredItems = users.items?.filter(\n            user =>\n                user.firstName.toLowerCase().includes(lowercaseFilter) ||\n                user.phone.replaceAll(' ', '').includes(filter)\n        )\n        return {\n            ...users,\n            items: filteredItems || null,\n        }\n    }\n)\n","import PropTypes from 'prop-types'\nimport { Form } from './SearchForm.styled'\n\nconst FilterForm = ({ setFilterParams, filterQuery }) => {\n    const handleChange = ({ target: { value } }) =>\n        setFilterParams({ filter: value })\n\n    return (\n        <Form>\n            <input\n                type=\"search\"\n                placeholder=\"Filter user by name or phone\"\n                value={filterQuery}\n                onChange={handleChange}\n            />\n            <button>Search</button>\n        </Form>\n    )\n}\n\nFilterForm.propTypes = {\n    setFilterParams: PropTypes.func.isRequired,\n    filterQuery: PropTypes.string.isRequired,\n}\n\nexport default FilterForm\n","import { useEffect, useMemo, useState } from 'react'\nimport { toast } from 'react-hot-toast'\nimport Button from 'components/Button/Button'\nimport UsersList from 'components/UserList/UsersList'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getAllUsersThunk } from 'store/users/thunks'\nimport { filterSelector, usersSelector } from 'store/users/selectors'\nimport FilterForm from 'components/Form/FilterForm'\nimport { setFilter } from 'store/users/userSlice'\nimport { useSearchParams } from 'react-router-dom'\n\nconst LIMIT = 10\n\nconst HomePage = () => {\n    const [currentPage, setPage] = useState(1)\n    const { items: users, total, page } = useSelector(usersSelector)\n    const filter = useSelector(filterSelector)\n    const [query, setFilterParams] = useSearchParams()\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!users || page !== currentPage)\n            dispatch(getAllUsersThunk({ page: currentPage, limit: LIMIT }))\n                .unwrap()\n                .then(({ total }) => toast.success(`Total: ${total} users`))\n    }, [dispatch, currentPage, total, users, page])\n\n    const filterQuery = useMemo(() => query.get('filter'), [query])\n\n    useEffect(() => {\n        filterQuery ? dispatch(setFilter(filterQuery)) : dispatch(setFilter(''))\n    }, [filterQuery, dispatch])\n\n    useEffect(() => {\n        !filterQuery && setFilterParams({})\n    }, [filterQuery, setFilterParams])\n\n    const loadMore = () => {\n        setPage(prev => prev + 1)\n    }\n\n    return (\n        users && (\n            <>\n                <FilterForm\n                    filterQuery={filter}\n                    setFilterParams={setFilterParams}\n                />\n                <UsersList users={users} isDetails />\n                {users.length < total && (\n                    <Button center handleClick={loadMore} text={'more...'} />\n                )}\n            </>\n        )\n    )\n}\n\nexport default HomePage\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","_ref","center","handleClick","text","_jsx","type","onClick","children","Form","title","_jsxs","className","css","Title","Text","_templateObject2","NativeText","_templateObject3","isEndedBiz","_templateObject4","StyledLink","Link","_templateObject5","_ref$user","user","_id","firstName","image","email","phone","isDetails","navigate","useNavigate","location","useLocation","route","state","pathname","_Fragment","Section","src","alt","width","to","concat","Outlet","users","map","User","filterSelector","filter","usersSelector","createSelector","_users$items","items","lowercaseFilter","toLowerCase","filteredItems","includes","replaceAll","_objectSpread","setFilterParams","filterQuery","placeholder","value","onChange","_ref2","target","_useState","useState","_useState2","_slicedToArray","currentPage","setPage","_useSelector","useSelector","total","page","_useSearchParams","useSearchParams","_useSearchParams2","query","dispatch","useDispatch","useEffect","getAllUsersThunk","limit","unwrap","then","toast","useMemo","get","setFilter","FilterForm","UsersList","length","Button","prev"],"sourceRoot":""}